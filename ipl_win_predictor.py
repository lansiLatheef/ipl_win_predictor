# -*- coding: utf-8 -*-
"""IPL win prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7urV5dp6C03XsTiLthT07QY_5zexzGB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#importing file
match = pd.read_csv('/matches.csv')
deliveries = pd.read_csv('/deliveries.csv')

match.head()

match.shape

deliveries.head()

total_score_df =deliveries.groupby(['match_id','inning']).sum()['total_runs'].reset_index()

total_score_df = total_score_df[total_score_df['inning']== 1]

total_score_df

match_df = match.merge(total_score_df[['match_id','total_runs']],left_on='id', right_on='match_id')

match_df

match_df['team1'].unique

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers bangalore',
    'Kolkata Knight Riders',
    'King XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Delhi Capitals'
]

match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

match_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match_df = match_df[match_df['team1'].isin(teams)]
match_df = match_df[match_df['team2'].isin(teams)]

match_df.shape

match_df = match_df[match_df['dl_applied'] == 0]

match_df = match_df[['match_id','city','winner','total_runs']]

deliveries_df = match_df.merge(deliveries,on='match_id')

deliveries_df = deliveries_df[deliveries_df['inning'] == 2]

deliveries_df

deliveries_df['current_score'] = deliveries_df.groupby('match_id').cumsum()['total_runs_y']

deliveries_df['runs_left'] = deliveries_df['total_runs_x'] - deliveries_df['current_score']

deliveries_df['balls_left'] = 126 - (deliveries_df['over']*6 + deliveries_df['ball'])

deliveries_df

deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].fillna("0")
deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].apply(lambda x:x if x == "0" else "1")
deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].astype('int')
wickets = deliveries_df.groupby('match_id').cumsum()['player_dismissed'].values
deliveries_df['wickets'] = 10 - wickets
deliveries_df.head()

deliveries_df.head()

# crr = runs/overs
deliveries_df['crr'] = (deliveries_df['current_score']*6)/(120 - deliveries_df['balls_left'])

deliveries_df['rrr'] = (deliveries_df['runs_left']*6)/deliveries_df['balls_left']

def result(row):
    return 1 if row['batting_team'] == row['winner'] else 0

deliveries_df['result'] = deliveries_df.apply(result,axis=1)

final_df = deliveries_df[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr','result']]

final_df = final_df.sample(final_df.shape[0])
final_df.sample()

final_df.dropna(inplace=True)

final_df = final_df[final_df['balls_left'] != 0]
X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)
X_train

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

trf = ColumnTransformer([
    ('trf',OneHotEncoder(sparse=False,drop='first'),['batting_team','bowling_team','city'])
]
,remainder='passthrough')

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('step1',trf),
    ('step2',LogisticRegression(solver='liblinear'))
])
pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

pipe.predict_proba(X_test)[10]

def match_summary(row):
    print("Batting Team-" + row['batting_team'] + " | Bowling Team-" + row['bowling_team'] + " | Target- " + str(row['total_runs_x']))

def match_progression(x_df,match_id,pipe):
    match = x_df[x_df['match_id'] == match_id]
    match = match[(match['ball'] == 6)]
    temp_df = match[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr']].dropna()
    temp_df = temp_df[temp_df['balls_left'] != 0]
    result = pipe.predict_proba(temp_df)
    temp_df['lose'] = np.round(result.T[0]*100,1)
    temp_df['win'] = np.round(result.T[1]*100,1)
    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)

    target = temp_df['total_runs_x'].values[0]
    runs = list(temp_df['runs_left'].values)
    new_runs = runs[:]
    runs.insert(0,target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)
    wickets = list(temp_df['wickets'].values)
    new_wickets = wickets[:]
    new_wickets.insert(0,10)
    wickets.append(0)
    w = np.array(wickets)
    nw = np.array(new_wickets)
    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]

    print("Target-",target)
    temp_df = temp_df[['end_of_over','runs_after_over','wickets_in_over','lose','win']]
    return temp_df,target

temp_df,target = match_progression(deliveries_df,75,pipe)
temp_df

import matplotlib.pyplot as plt
plt.figure(figsize=(18,8))
plt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)
plt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)
plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])
plt.title('Target-' + str(target))

teams

deliveries_df['city'].unique()

import pickle
pickle.dump(pipe,open('pipe.pkl','wb'))

##import gc
#import pickle
#from google.colab import drive
#drive.mount('/content/drive', force_remount=True)

#pick_insert = open('drive/My Drive/pipe.pickle','wb')
#pickle.dump(pipe, pick_insert)
#pick_insert.close()

#pick_read = open('drive/My Drive/pipe.pickle','rb')
#pipe = pickle.load(pick_read)
#pick_read.close()
